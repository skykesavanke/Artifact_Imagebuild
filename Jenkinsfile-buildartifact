pipeline{
    agent any

    environment{
         AWS_ACCESS_KEY_ID     = credentials('aws-access-key-id')
         AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
         
         ARTIFACT_REPO = "buildartifactrepo"
         REGION = "us-east-1"
         AWS_ACCOUNT_ID="211125415675"
        IMAGE_REPO_NAME = "helloworldrepo"
        AWS_REGION = 'us-east-1'
        ECR_URL= "211125415675.dkr.ecr.${REGION}.amazonaws.com"
    }
    
    stages{
       stage('Code Checkout'){
             
             steps{
                script{
                git branch:'master',url:'https://github.com/skykesavanke/Artifact_Imagebuild.git'
            }
             }

       
        }
        stage ('Token Generation'){
            steps{
                script{
                def tokenFile = 'codeartifact_token.txt'
                    bat """aws codeartifact get-authorization-token --domain domain-1 --domain-owner 211125415675 --region us-east-1 --query authorizationToken --output text > ${tokenFile}"""
                    
                
            //bat ''' FOR /f "tokens=*" %%i IN ('aws codeartifact get-authorization-token --domain domain-1 --domain-owner 211125415675 --region us-east-1 --query authorizationToken --output text') DO SET CODEARTIFACT_AUTH_TOKEN=%%i '''
                    }
            }
        }
        
        stage('Building Artifact'){
            
            steps{
                script{
                

                    def mavenPath = 'C:\\Users\\kesavank\\Maven\\apache-maven-3.9.6\\bin\\mvn'
                    bat "${mavenPath} clean"
                    echo ".......Cleaning the previous build......"
                    bat "${mavenPath} validate"
                    bat "${mavenPath} compile"
                    echo ".......Compiling the source code......"
                    bat "${mavenPath} package"
                    echo ".......Creating Jar files........"
                    bat "${mavenPath} verify"
                    bat "${mavenPath} install"
                }    
                
            }
        }
        stage('Push to Code Artifact'){
            steps{
                
                script{  
                    def tokenFile = 'codeartifact_token.txt'  
                    def token = readFile(tokenFile).trim()
                    withEnv(["CODEARTIFACT_AUTH_TOKEN=${token}"]) {
                        echo "Token generated and set in environment"
                    def artifactPath = 'C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\Image_Build_from_Artifact\\target\\helloworld-0.0.1-SNAPSHOT.jar'
                    def artifactRepoUrl = "https://domain-1-211125415675.d.codeartifact.us-east-1.amazonaws.com/maven/buildartifactrepo/${artifactPath}"
                    bat "curl --request PUT ${artifactRepoUrl} --user \"aws:${CODEARTIFACT_AUTH_TOKEN}\" --data-binary @${artifactPath}"

                    def pomPath = 'C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\Image_Build_from_Artifact\\pom.xml'
                    bat "curl --request PUT ${artifactRepoUrl} --user \"aws:${CODEARTIFACT_AUTH_TOKEN}\" --data-binary @${pomPath}"
                
                }

            }
        }

        
        }
         stage('Update Package Version Status') {
            steps {
                script {
                    def tokenFile = 'codeartifact_token.txt'
                    def token = readFile(tokenFile).trim()
                    withEnv(["CODEARTIFACT_AUTH_TOKEN=${token}"]) {
                        
                        bat """
                            aws codeartifact update-package-versions-status ^
                                --domain domain-1 ^
                                --domain-owner 211125415675 ^
                                --repository buildartifactrepo ^
                                --format maven ^
                                --namespace com.helloworld.app ^
                                --package my-app ^
                                --versions 1.0 ^
                                --target-status Published
                        """
                    }
                }
            }
        }
    //     stage('Push image to ECR'){
    //         steps{
    //             script{
                
    //                 def imageRepoName = "${env.IMAGE_REPO_NAME}"
    //                 def awsRegion = "${env.REGION}"
    //                 def ecrUrl = "211125415675.dkr.ecr.${awsRegion}.amazonaws.com"

                        
    //                     bat """
    //                             set IMAGE_REPO_NAME=${imageRepoName}
    //                             set AWS_REGION=${awsRegion}
    //                             set ECR_URL=${ecrUrl}

    //                             aws ecr get-login-password --region %AWS_REGION% | docker login --username AWS --password-stdin  %ECR_URL%
    //                             docker build -t  %IMAGE_REPO_NAME% .
    //                             docker tag %IMAGE_REPO_NAME%:latest %ECR_URL%/%IMAGE_REPO_NAME%:latest
    //                             docker push  %ECR_URL%/%IMAGE_REPO_NAME%:latest
    //                    """
    //                 } 
                    
    //          }  
    // }
        
        }
    }


